/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package amazon;

import java.io.*;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author Ajay
 */
public class AmazonFrame extends javax.swing.JFrame {

    /**
     * Creates new form AmazonFrame
     */
    public AmazonFrame() {
        BufferedReader bR = null;
        exStop = false;
        try {
            initComponents();
            nodesList = new HashMap<String, String>();
            bR = new BufferedReader(new FileReader("Nodes.txt"));
            String line;
            while ((line = bR.readLine()) != null) {
                if (!line.equals("")) {
                    String nodes[] = line.split("-");
                    nodesList.put(nodes[0].trim(), nodes[1].trim());
                }
            }
//            for(Map.Entry s: nodesList.entrySet()){
//                jComboBox1.addItem(s.getKey());
//            }
            model.addTableModelListener(new TableModelListener() {
                
                @Override
                public void tableChanged(TableModelEvent e) {
                    jTable1.scrollRectToVisible(jTable1.getCellRect(jTable1.getRowCount(), jTable1.getColumnCount(), true));
                }
            });
        } catch (IOException ex) {
            Logger.getLogger(AmazonFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                bR.close();
            } catch (IOException ex) {
                Logger.getLogger(AmazonFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        jButton3.setEnabled(false);
        existingIsbn = new ArrayList<String>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel6 =  new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.enableInputMethods(false);
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setModel(model);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Rank");

        jButton1.setText("Find");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jProgressBar1.setStringPainted(true);
        jProgressBar1.setBorderPainted(true);
        jProgressBar1.setForeground(new java.awt.Color(0, 51, 51));

        jLabel2.setText("Current Node");

        jButton3.setText("Stop");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setText("Keywords");

        jLabel5.setText("Difference");

        jButton2.setText("Upload ISBN");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel4)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (thread != null) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
            if (thread.isAlive()) {
                JOptionPane.showMessageDialog(rootPane, "One Execution already in progress");
                return;
            }
        }
        if (jTextField1.getText().equals("") || !isNumeric(jTextField1.getText())) {
            JOptionPane.showMessageDialog(rootPane, "Rank field has no value or is invalid");
            jTextField1.requestFocus();
            return;
        }
        jTextField1.setEditable(false);
        if (jTextField3.getText().equals("") || !isNumeric(jTextField3.getText())) {
            JOptionPane.showMessageDialog(rootPane, "Difference has no value or is invalid");
            jTextField3.requestFocus();
            return;
        }
        jTextField2.setEditable(false);
        jTextField3.setEditable(false);
//       if(jTextField2.getText().equals("") ){
//            JOptionPane.showMessageDialog(rootPane, "Enter Title");
//            return;
//        }

        final int rank = Integer.parseInt(jTextField1.getText());
//        final String query = nodesList.get(jComboBox1.getSelectedItem().toString());
        final String keywords = jTextField2.getText();
        final String difference = jTextField3.getText();
//        final String path  ; //= JOptionPane.showInputDialog(null, "Enter path to save csv: ", "Path", 1);
        fW = null;
        processingStop = false;
        existingIsbn = new ArrayList<String>();
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose Path for saving CSV file");
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
//        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setFileFilter(new CSVFilter());
        
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            try {
                System.out.println("getCurrentDirectory(): " + chooser.getSelectedFile().getCanonicalPath());
                
                path = chooser.getSelectedFile().getCanonicalPath();
                if (!path.endsWith(".csv")) {
                    path += ".csv";
                }
                
                File newF = new File(path);
                
                if (newF.exists()) {
                    
                    int actionDialog = JOptionPane.showConfirmDialog(this,
                            "Replace existing file?");
                    // may need to check for cancel option as well
                    if (actionDialog == JOptionPane.NO_OPTION || actionDialog == JOptionPane.CANCEL_OPTION) {
                        return;
                    }

//                        existingIsbn = new ArrayList<String>();
                    BufferedReader bF = new BufferedReader(new FileReader(newF));
                    String line;
                    while ((line = bF.readLine()) != null) {
                        if (!line.equals("") && !line.split(",")[1].trim().equals("ISBN")) {
                            existingIsbn.add(line.split(",")[1].trim());
                        }
                    }
                    
                    
                    
                }
                
            } catch (IOException ex) {
                Logger.getLogger(AmazonFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
//            System.out.println("getSelectedFile() : " + chooser.getSelectedFile());
        } else {
            return;
        }
        
        
        File outputFile = new File(path);
        try {
            
            if (!outputFile.exists()) {
                fW = new FileWriter(outputFile);
                fW.write("Sales Rank," + "ISBN," + "\"Title\"," + "\"Author \"," + "Weight,"
                        + "Lowest New Price," + "Lowest Like New Price,"
                        + "Difference,");
            } else {
                BufferedReader bF = new BufferedReader(new FileReader(outputFile));
                String line = bF.readLine();
                fW = new FileWriter(outputFile, true);
                if (line == null || line.equals("")) {
                    fW.write("Sales Rank," + "ISBN," + "\"Title\"," + "\"Author \"," + "Weight,"
                            + "Lowest New Price," + "Lowest Like New Price,"
                            + "Difference,");
                }
            }
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        try {
            fW.write("\n");
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        thread = new Thread() {
            
            @Override
            public void run() {
                try {
                    jProgressBar1.setValue(0);
                    jProgressBar1.setIndeterminate(true);
                    jButton1.setEnabled(false);
                    jButton2.setEnabled(false);
                    jButton3.setEnabled(true);
                    jProgressBar1.setIndeterminate(false);
                    int i = 1;
                    for (Map.Entry s : nodesList.entrySet()) {
                        if (!processingStop) {
                            jLabel3.setText(s.getKey().toString());
                            if (existingIsbn.size() < 1) {
                                existingIsbn = new ArrayList<String>();
                            }
//                            System.out.println(existingIsbn);
                            new ItemLookupSample(model, jProgressBar1).searchByTitle(s.getValue().toString(), keywords, difference, rank, path, fW, existingIsbn);
                            fW.flush();
                            
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(AmazonFrame.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        jProgressBar1.setIndeterminate(false);
                        jButton1.setEnabled(true);
                        jTextField1.setEditable(true);
                        jTextField2.setEditable(true);
                        jTextField3.setEditable(false);
                        jButton2.setEnabled(true);
                        jButton3.setEnabled(false);
                        fW.close();
                        JOptionPane.showMessageDialog(rootPane, "Completed");
                    } catch (IOException ex) {
                        Logger.getLogger(AmazonFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
        thread.start();
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        processingStop = true;
        exStop = true;
        jButton3.setEnabled(false);
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        if (thread != null) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
            if (thread.isAlive()) {
                JOptionPane.showMessageDialog(rootPane, "One Execution already in progress");
                return;
            }
        }
        BufferedReader bR = null;
        exStop = false;
        final List<String> ISBN = new ArrayList<String>();
        try {
            String file = new String();
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("Choose Path of ISBN file");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    System.out.println("getCurrentDirectory(): " + chooser.getSelectedFile().getCanonicalPath());
                    
                    file = chooser.getSelectedFile().getCanonicalPath();
                } catch (IOException ex) {
                    Logger.getLogger(AmazonFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                bR = new BufferedReader(new FileReader(file));
                String line;
                
                while ((line = bR.readLine()) != null) {
                    ISBN.add(line);
                }
//                new ItemLookupSample1(model, jProgressBar1).getResultsByISBN(ISBN, fW);

            } else {
                return;
            }
            chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("Choose Path for saving CSV file");
            chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
//        chooser.setAcceptAllFileFilterUsed(false);
            chooser.setFileFilter(new CSVFilter());
            existingIsbn = new ArrayList<String>();
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    System.out.println("getCurrentDirectory(): " + chooser.getSelectedFile().getCanonicalPath());
                    
                    path = chooser.getSelectedFile().getCanonicalPath();
                    if (!path.endsWith(".csv")) {
                        path += ".csv";
                    }
                    
                    File newF = new File(path);
                    
                    if (newF.exists()) {
                        
                        int actionDialog = JOptionPane.showConfirmDialog(this,
                                "Replace existing file?");
                        // may need to check for cancel option as well
                        if (actionDialog == JOptionPane.NO_OPTION || actionDialog == JOptionPane.CANCEL_OPTION) {
                            return;
                        }

//                        existingIsbn = new ArrayList<String>();
                        BufferedReader bF = new BufferedReader(new FileReader(newF));
                        String line;
                        while ((line = bF.readLine()) != null) {
                            if (!line.equals("") && !line.split(",")[1].trim().equals("ISBN")) {
                                existingIsbn.add(line.split(",")[1].trim());
                            }
                        }
                        
                        
                        
                    }
                    
                } catch (IOException ex) {
                    Logger.getLogger(AmazonFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
//            System.out.println("getSelectedFile() : " + chooser.getSelectedFile());
            } else {
                return;
            }
            
            
            File outputFile = new File(path);
            try {
                
                if (!outputFile.exists()) {
                    fW = new FileWriter(outputFile);
                    fW.write("Sales Rank," + "ISBN," + "\"Title\"," + "\"Author \"," + "Weight,"
                            + "Lowest New Price," + "Lowest Used Price,"
                            + "Lowest Collectible Price,");
                } else {
                    BufferedReader bF = new BufferedReader(new FileReader(outputFile));
                    String line = bF.readLine();
                    fW = new FileWriter(outputFile, true);
                    if (line == null || line.equals("")) {
                        fW.write("Sales Rank," + "ISBN," + "\"Title\"," + "\"Author \"," + "Weight,"
                                + "Lowest New Price," + "Lowest Used Price,"
                                + "Lowest Collectible Price,");
                    }
                }
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            try {
                fW.write("\n");
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            
            
            thread = new Thread() {
                
                @Override
                public void run() {
                    try {
                        jButton1.setEnabled(false);
                        jButton2.setEnabled(false);
                        jButton3.setEnabled(true);
                        jProgressBar1.setValue(0);
                        
                        jProgressBar1.setIndeterminate(true);
                        
                        jTextField2.setEditable(false);
                        jTextField1.setEditable(false);
                        jTextField3.setEditable(false);
                        
                        jProgressBar1.setIndeterminate(false);
                        new ItemLookupSample1(model, jProgressBar1).getResultsByISBN(ISBN, fW, existingIsbn);
                        System.out.println("Stopped ASd");
                        
                    } catch (Exception e) {
                        e.printStackTrace();
                    } finally {
                        jProgressBar1.setIndeterminate(false);
                        jButton1.setEnabled(true);
                        jTextField1.setEditable(true);
                        jTextField2.setEditable(true);
                        jTextField3.setEditable(false);
                        jButton2.setEnabled(true);
                        jButton3.setEnabled(false);
                    }
                }
            };
            if (!exStop) {
                thread.start();
            }
            
        } catch (IOException ex) {
            Logger.getLogger(AmazonFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                bR.close();
            } catch (IOException ex) {
                Logger.getLogger(AmazonFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AmazonFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AmazonFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AmazonFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AmazonFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                new AmazonFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    public static javax.swing.JLabel jLabel6;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
    DefaultTableModel model = new javax.swing.table.DefaultTableModel(
            new Object[][]{},
            new String[]{
                "ISBN", "Current New Price", "Current Like New Price", "Weight (lbs.)", "Title", "Rank", "Difference"
            }) {
        
        @Override
        public boolean isCellEditable(int row, int column) {
            //all cells false
            return false;
        }
    };
    Thread thread;
    String path;
    
    public static boolean isNumeric(String str) {
        return str.matches("[+-]?\\d*(\\.\\d+)?");
    }
    Map<String, String> nodesList;
    static boolean processingStop;
    static boolean exStop;
    List<String> existingIsbn;
    FileWriter fW;
    
    public static double round(double unrounded, int precision, int roundingMode) {
        BigDecimal bd = new BigDecimal(unrounded);
        BigDecimal rounded = bd.setScale(precision, roundingMode);
        return rounded.doubleValue();
    }
}

class CSVFilter extends javax.swing.filechooser.FileFilter {
    
    public boolean accept(File f) {
        
        return f.isFile() && f.getName().toLowerCase().endsWith(".csv");
    }
    
    public String getDescription() {
        return "*.csv";
    }
}
